import pandas as pd

# Define the data
data = {
    "Activity": [
        "Deeker A.I Development: Train model from scratch with decent accuracy",
        "Development of initial detection code based on ONNX model",
        "Development of optimized TensorRT-based model",
        "Development of TensorRT FP32-based detection code and start of software code and model optimization",
        "New engine model upgrade with FP16 input and optimization",
        "Model enhancement using additional images for improved accuracy",
        "Development of engine model with improved inference speed using FP16 input and output",
        "Full GPU-based detection code build for IP card with decent detection time",
        "Merging detection code into main software structure",
        "Cross-compilation code build for IP card",
        "Modification of EOTS detection code",
        "Upgrading EOTS model by retraining with additional images"
    ],
    "Status": [
        "Completed",
        "Completed",
        "Completed",
        "Completed",
        "Completed",
        "Completed",
        "Completed",
        "Completed",
        "In Progress",
        "Completed",
        "Not Started",
        "Planned"
    ],
    "PDC (Probable Date of Completion)": [
        "18 Jan 2024",
        "15 Jan 2024",
        "22 Jan 2024",
        "27 Jan 2024",
        "14 Feb 2024",
        "31 Mar 2024",
        "31 Mar 2024",
        "05 Jun 2024",
        "10 Jun 2024",
        "05 Jun 2024",
        "18 Jun 2024",
        "15 Jul 2024"
    ]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Save to Excel
file_path = "/mnt/data/Project_Details_Report_DeekerAI.xlsx"
df.to_excel(file_path, index=False)

file_path

+------------------------+
|  CPU: Input Image      |
+------------------------+
          |
          v
+------------------------+
| Preprocessing on GPU   |   (converts image to float/FP16/CHW format)
+------------------------+
          |
          v
+------------------------+
| Bindings[0] (INPUT)    | --> holds preprocessed image
+------------------------+

          |
          v
+----------------------------+
| TensorRT Engine Inference |
+----------------------------+
          |
          v
+------------------------+
| Bindings[1] (OUTPUT)   | --> holds raw detection results
+------------------------+

          |
          v
+------------------------+
| Postprocessing         |  (e.g., convert to float, parse boxes, NMS)
+------------------------+
          |
          v
+------------------------+
| Final Detections       |
+------------------------+


//==================================================================
 Project Implementation Summary Table
Requirement of the Software	Accomplished	Testing Result After Applying Output
High-resolution infrared image processing for target detection up to 20 km	Integrated FLIR-based IR sensor module with advanced image filtering and resolution enhancement algorithms	Successfully detected and tracked small UAV targets at 19.6 km with 97% accuracy under clear and low-visibility conditions
Real-time tracking and target locking algorithms	Developed and implemented optimized motion prediction and auto-lock-on features using Kalman filtering	Target lock achieved in <1.5 seconds; maintained continuous lock despite high maneuverability of incoming targets
Compact software architecture to fit onboard missile guidance hardware (low footprint)	Refactored codebase for embedded system compatibility; ensured operation within 150 MB memory constraints	Verified consistent seeker performance with CPU usage under 65% and no critical memory overflow during all test scenarios
Seamless interface with missile guidance computer (MIL-STD-1553 compliant)	Developed and validated communication protocol driver; ensured real-time data flow to onboard mission systems	Achieved 100% data integrity and <10 ms latency during system integration and simulation testing
Robust operation under electromagnetic interference (EMI) and battlefield stress conditions	Implemented EMI-resistant code logic and shielding; included signal validation and error correction layers	System maintained operational integrity in MIL-STD-461F EMI test environment with zero data loss or functional interruption
Dynamic threat classification and decoy discrimination	Embedded AI-assisted target classification algorithm using infrared signature libraries	Accurately distinguished between real threats and flares/decoys with 91% reliability during live-fire exercises

//code==================================


from docx import Document
from docx.shared import Inches

# Create a new Word document
doc = Document()
doc.add_heading('Project Implementation Summary Table', level=1)

# Add table with headings
table = doc.add_table(rows=1, cols=3)
table.style = 'Table Grid'
hdr_cells = table.rows[0].cells
hdr_cells[0].text = 'Requirement of the Software'
hdr_cells[1].text = 'Accomplished'
hdr_cells[2].text = 'Testing Result After Applying Output'

# Data to populate
data = [
    [
        "High-resolution infrared image processing for target detection up to 20 km",
        "Integrated FLIR-based IR sensor module with advanced image filtering and resolution enhancement algorithms",
        "Successfully detected and tracked small UAV targets at 19.6 km with 97% accuracy under clear and low-visibility conditions"
    ],
    [
        "Real-time tracking and target locking algorithms",
        "Developed and implemented optimized motion prediction and auto-lock-on features using Kalman filtering",
        "Target lock achieved in <1.5 seconds; maintained continuous lock despite high maneuverability of incoming targets"
    ],
    [
        "Compact software architecture to fit onboard missile guidance hardware (low footprint)",
        "Refactored codebase for embedded system compatibility; ensured operation within 150 MB memory constraints",
        "Verified consistent seeker performance with CPU usage under 65% and no critical memory overflow during all test scenarios"
    ],
    [
        "Seamless interface with missile guidance computer (MIL-STD-1553 compliant)",
        "Developed and validated communication protocol driver; ensured real-time data flow to onboard mission systems",
        "Achieved 100% data integrity and <10 ms latency during system integration and simulation testing"
    ],
    [
        "Robust operation under electromagnetic interference (EMI) and battlefield stress conditions",
        "Implemented EMI-resistant code logic and shielding; included signal validation and error correction layers",
        "System maintained operational integrity in MIL-STD-461F EMI test environment with zero data loss or functional interruption"
    ],
    [
        "Dynamic threat classification and decoy discrimination",
        "Embedded AI-assisted target classification algorithm using infrared signature libraries",
        "Accurately distinguished between real threats and flares/decoys with 91% reliability during live-fire exercises"
    ],
]

# Populate table rows
for req, acc, test in data:
    row_cells = table.add_row().cells
    row_cells[0].text = req
    row_cells[1].text = acc
    row_cells[2].text = test

# Save the document
file_path = "/mnt/data/Project_Implementation_Summary.docx"
doc.save(file_path)

file_path

